---
git_dir: "~/{{ lookup('env', 'CI_PROJECT_DIR') }}"
digitalocean_api_token: "{{ lookup('env', 'DIGITALOCEAN_API_TOKEN') }}"
cluster_name: "cc02"
t7_env: "stage"

docker_registry: "cc02-registry.t7develop.io:443"
docker_registry_user: "{{ lookup('env', 'REGISTRY_USER') }}"
docker_registry_pass: "{{ lookup('env', 'REGISTRY_PASS') }}"
docker_registry_image: "{{ lookup('env', 'CI_PROJECT_NAME') }}"
docker_registry_version: "latest"

docker_web_image: "{{ docker_registry }}/{{ docker_registry_image }}:{{ docker_registry_version }}"

# s3 settings
s3fs_bucket: "t7-live-fsmn"
s3fs_region: "nyc3"
s3fs_cname_url: "t7-live-fsmn.nyc3.cdn.digitaloceanspaces.com"
s3fs_hostname: "https://nyc3.digitaloceanspaces.com"
s3fs_use_https: yes
s3fs_use_s3_for_public: no
s3fs_no_rewrite_cssjs: no
s3fs_use_s3_for_private: no
s3fs_root_folder: "db.friendsschoolplantsale.com"
s3fs_public_folder: "files"
s3fs_private_folder: "private"

digitalocean_domains:
  - name: "t7stage.io"
    records:
      - name: "backoffice"
        type: "A"
        value: "159.203.51.233"
        state: present
        ttl: 300

flightdeck_cluster:
  namespace: "backoffice-t7stage-io"
  volumes:
    - name: "backoffice-stage-files"
      class: "rook-cephfs"
      mode: "ReadWriteMany"
      size: "10Gi"
  configMaps:
    - name: "varnish"
      files:
        - name: "flight-deck-varnish.yml"
          content: |
            flightdeck_varnish:
              secretFile: "/config/varnish-secret/secret"
              memSize: "256m"
  secrets:
    - name: "ingress-auth"
      data:
        - name: "auth"
          value: "{{ lookup('file', _run_temp_dir.path + '/.htpasswd' )}}"
    - name: "web"
      files:
        - name: "flight-deck-web.yml"
          content: |
            s3fs_bucket: "{{ s3fs_bucket }}"
            s3fs_region: "{{ s3fs_region }}"
            s3fs_cname_url: "{{ s3fs_cname_url }}"
            s3fs_hostname: "{{ s3fs_hostname }}"
            s3fs_use_https: "{{ s3fs_use_https }}"
            s3fs_use_s3_for_public: {{ s3fs_use_s3_for_public | bool }}
            s3fs_no_rewrite_cssjs: {{ s3fs_no_rewrite_cssjs| bool  }}
            s3fs_use_s3_for_private: {{ s3fs_use_s3_for_private| bool  }}
            s3fs_root_folder: "{{ s3fs_root_folder }}"
            s3fs_public_folder: "{{ s3fs_public_folder }}"
            s3fs_private_folder: "{{ s3fs_private_folder }}"
            t7_env: "{{ t7_env }}"
            backoffice_mysql_user: "{{ lookup('env', 'STAGE_BACK_MYSQL_USER') }}"
            backoffice_mysql_pass: "{{ lookup('env', 'STAGE_BACK_MYSQL_PASS') }}"
            backoffice_mysql_name: "{{ lookup('env', 'STAGE_BACK_MYSQL_NAME') }}"
            backoffice_mysql_host: "{{ lookup('env', 'STAGE_BACK_MYSQL_HOST') | default('mysql.database.svc.cluster.local', true) }}"
            backoffice_mysql_port: "{{ lookup('env', 'STAGE_BACK_MYSQL_PORT') | default('3306', true) }}"
            backoffice_s3_key: "{{ lookup('env', 'STAGE_BACK_S3_KEY') }}"
            backoffice_s3_secret: "{{ lookup('env', 'STAGE_BACK_S3_SECRET') }}"
            backoffice_s3_prefix: "backoffice.t7stage.io/files"
            backoffice_smtp_user: "{{ lookup('env','STAGE_FSMN_SMTP_USER') }}"
            backoffice_smtp_pass: "{{ lookup('env','STAGE_FSMN_SMTP_PASS') }}"
            flightdeck_web:
              vhosts:
                - name: "backoffice.t7stage.io"
                  aliases:
                    - "docker.test"
                  env:
                    - name: "T7_SITE_ENVIRONMENT"
                      value: "stage"
                  extraLines:
                    - |
                        <IfModule mod_proxy.c>
                          ProxyRequests Off
                          SSLProxyEngine on
                          <Proxy *>
                              Order deny,allow
                              Allow from all
                          </Proxy>

                          <location /s3fs-css/>
                            ProxyPass https://{{ s3fs_cname_url }}/{{ s3fs_root_folder }}/{{ s3fs_public_folder }}/
                            ProxyPassReverse https://{{ s3fs_cname_url }}/{{ s3fs_root_folder }}/{{ s3fs_public_folder }}/
                          </location>

                          <location /s3fs-js/>
                            ProxyPass https://{{ s3fs_cname_url }}/{{ s3fs_root_folder }}/{{ s3fs_public_folder }}/
                            ProxyPassReverse https://{{ s3fs_cname_url }}/{{ s3fs_root_folder }}/{{ s3fs_public_folder }}/
                          </location>
                         </IfModule>
              php:
                upload_max_filesize: "128M"
                post_max_size: "128M"
                max_execution_time: "300"
    - name: "registry"
      type: "kubernetes.io/dockerconfigjson"
      data:
        - name: ".dockerconfigjson"
          value: >
            {{ ' ' }}
            {
              "auths": {
                "{{ docker_registry }}": {
                  "auth": "{{ (docker_registry_user + ':' + docker_registry_pass) | b64encode }}",
                  "email": null
                }
              }
            }
    - name: "varnish-secret"
      data:
        - name: "secret"
          value: "{{ lookup('env', 'STAGE_BACK_VARNISH_SECRET') }}"

  ingress:
    name: "ingress"
    auth:
      secret: "ingress-auth"
    tlsIssuer: "lets-encrypt-ops-at-ten7-com"
    tls:
      - secret: "lets-encrypt-ops-at-ten7-com"
        hosts:
          - "backoffice.t7stage.io"
    rules:
      - host: "backoffice.t7stage.io"
        paths:
          - path: "/"
            backend: "web"
            port: "80"
  web:
    image: "{{ docker_web_image }}"
    replicas: 1
    wait: yes
    delete: yes
    imagePullSecrets:
      - "registry"
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    minReadySeconds: 15
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - web
            topologyKey: kubernetes.io/hostname
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: doks.digitalocean.com/node-pool
              operator: In
              values:
              - web2-pool
    volumes:
      - name: "backoffice-stage-files"
        path: "/var/www/files"
    secrets:
      - name: "web"
        path: "/secrets"
    varnish:
      memory: "256M"
      storage: "1024M"
